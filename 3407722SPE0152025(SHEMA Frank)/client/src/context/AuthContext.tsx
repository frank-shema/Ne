
import React, { createContext, useContext, useState, useEffect } from "react";

// Define types for our context
type User = {
  id: string;
  firstName: string;
  lastName: string;
  email: string;
  role: "admin" | "attendant";
};

type AuthContextType = {
  user: User | null;
  token: string | null;
  login: (email: string, password: string) => Promise<void>;
  signup: (userData: Omit<User, "id"> & { password: string }) => Promise<void>;
  logout: () => void;
  loading: boolean;
  error: string | null;
};

const AuthContext = createContext<AuthContextType | undefined>(undefined);

export const AuthProvider: React.FC<{ children: React.ReactNode }> = ({
  children,
}) => {
  const [user, setUser] = useState<User | null>(null);
  const [token, setToken] = useState<string | null>(null);
  const [loading, setLoading] = useState(false);
  const [error, setError] = useState<string | null>(null);

  // Check if user is already logged in on mount
  useEffect(() => {
    const storedUser = localStorage.getItem("user");
    const storedToken = localStorage.getItem("token");

    if (storedUser && storedToken) {
      setUser(JSON.parse(storedUser));
      setToken(storedToken);
    }
  }, []);

  // For now, we'll simulate authentication since the backend isn't connected yet
  const login = async (email: string, password: string) => {
    setLoading(true);
    setError(null);

    try {
      // Simulate API call delay
      await new Promise((resolve) => setTimeout(resolve, 1000));

      // Mock login logic - in a real app, this would be an API call
      if (email === "admin@example.com" && password === "password") {
        const mockUser: User = {
          id: "1",
          firstName: "Admin",
          lastName: "User",
          email: "admin@example.com",
          role: "admin",
        };
        const mockToken = "mock-jwt-token-for-admin";

        setUser(mockUser);
        setToken(mockToken);

        // Store in localStorage
        localStorage.setItem("user", JSON.stringify(mockUser));
        localStorage.setItem("token", mockToken);
      } else if (email === "attendant@example.com" && password === "password") {
        const mockUser: User = {
          id: "2",
          firstName: "Attendant",
          lastName: "User",
          email: "attendant@example.com",
          role: "attendant",
        };
        const mockToken = "mock-jwt-token-for-attendant";

        setUser(mockUser);
        setToken(mockToken);

        // Store in localStorage
        localStorage.setItem("user", JSON.stringify(mockUser));
        localStorage.setItem("token", mockToken);
      } else {
        throw new Error("Invalid credentials");
      }
    } catch (err) {
      setError(err instanceof Error ? err.message : "Login failed");
    } finally {
      setLoading(false);
    }
  };

  const signup = async (userData: Omit<User, "id"> & { password: string }) => {
    setLoading(true);
    setError(null);

    try {
      // Simulate API call delay
      await new Promise((resolve) => setTimeout(resolve, 1000));

      // Mock signup logic - in a real app, this would be an API call
      const mockUser: User = {
        id: "3", // In a real app, this would be generated by the server
        ...userData,
      } as User;

      const mockToken = `mock-jwt-token-for-${userData.role}`;

      setUser(mockUser);
      setToken(mockToken);

      // Store in localStorage
      localStorage.setItem("user", JSON.stringify(mockUser));
      localStorage.setItem("token", mockToken);
    } catch (err) {
      setError(err instanceof Error ? err.message : "Signup failed");
    } finally {
      setLoading(false);
    }
  };

  const logout = () => {
    setUser(null);
    setToken(null);
    localStorage.removeItem("user");
    localStorage.removeItem("token");
  };

  return (
    <AuthContext.Provider
      value={{ user, token, login, signup, logout, loading, error }}
    >
      {children}
    </AuthContext.Provider>
  );
};

export const useAuth = () => {
  const context = useContext(AuthContext);
  if (context === undefined) {
    throw new Error("useAuth must be used within an AuthProvider");
  }
  return context;
};
